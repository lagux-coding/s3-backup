Index: inc/class-destination-s3.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Aws\\Exception\\AwsException;\r\n\r\nclass S3Testing_Destination_S3\r\n{\r\n    public function option_defaults()\r\n    {\r\n        return [\r\n            's3base_url' => '',\r\n            's3base_multipart' => true,\r\n            's3base_pathstylebucket' => false,\r\n            's3base_version' => 'latest',\r\n            's3base_signature' => 'v4',\r\n            's3accesskey' => '',\r\n            's3secretkey' => '',\r\n            's3bucket' => '',\r\n            's3region' => 'ap-southeast-2',\r\n//            's3ssencrypt' => '',\r\n//            's3storageclass' => '',\r\n            's3dir' => trailingslashit(sanitize_file_name(get_bloginfo('name'))),\r\n//            's3maxbackups' => 15,\r\n//            's3syncnodelete' => true,\r\n        ];\r\n    }\r\n\r\n    public function edit_tab($jobid)\r\n    {\r\n        ?>\r\n        <h3 class=\"title\">\r\n            <?php esc_html_e('S3 Service'); ?>\r\n        </h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\">\r\n                    <label for=\"s3region\">\r\n                        <?php esc_html_e('Select a S3 service'); ?>\r\n                    </label>\r\n                </th>\r\n                <td>\r\n\r\n                    <select name=\"s3region\"\r\n                            id=\"s3region\"\r\n                            title=\"<?php esc_attr_e('S3 Region'); ?>\">\r\n                        <?php foreach (S3Testing_S3_Destination::options() as $id => $option) { ?>\r\n                            <option value=\"<?php echo esc_attr($id); ?>\"\r\n                                <?php selected($id, S3Testing_Option::get($jobid, 's3region')); ?>\r\n                            >\r\n                                <?php echo esc_html($option['label']); ?>\r\n                            </option>\r\n                        <?php } ?>\r\n                    </select>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th scope=\"row\">\r\n                    <label for=\"s3base_url\">\r\n                        <?php esc_html_e('S3 Server URL'); ?>\r\n                    </label>\r\n                </th>\r\n                <td>\r\n                    <input\r\n                            id=\"s3base_url\"\r\n                            name=\"s3base_url\"\r\n                            type=\"text\"\r\n                            value=\"<?php echo esc_attr(\r\n                                S3Testing_Option::get($jobid, 's3base_url')\r\n                            ); ?>\"\r\n                            class=\"regular-text\"\r\n                            autocomplete=\"off\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h3 class=\"title\">\r\n            <?php esc_html_e('S3 Access Keys'); ?>\r\n        </h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\">\r\n                    <label for=\"s3accesskey\">\r\n                        <?php esc_html_e('Access Key'); ?>\r\n                    </label>\r\n                </th>\r\n                <td>\r\n                    <input id=\"s3accesskey\"\r\n                           name=\"s3accesskey\"\r\n                           type=\"text\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get($jobid, 's3accesskey')); ?>\"\r\n                           class=\"regular-text\"\r\n                           autocomplete=\"off\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th scope=\"row\"><label for=\"s3secretkey\"><?php esc_html_e('Secret Key'); ?></label></th>\r\n                <td>\r\n                    <input id=\"s3secretkey\" name=\"s3secretkey\" type=\"password\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get(\r\n                               $jobid,\r\n                               's3secretkey'\r\n                           )); ?>\" class=\"regular-text\" autocomplete=\"off\"/>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h3 class=\"title\">\r\n            <?php esc_html_e('S3 Bucket'); ?>\r\n        </h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\">\r\n                    <label for=\"s3bucketselected\">\r\n                        <?php esc_html_e('Bucket selection'); ?>\r\n                    </label>\r\n                </th>\r\n                <td>\r\n                    <input id=\"s3bucketselected\"\r\n                           name=\"s3bucketselected\"\r\n                           type=\"hidden\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get($jobid, 's3bucket')); ?>\"\r\n                    />\r\n                    <?php\r\n                    if (S3Testing_Option::get($jobid, 's3accesskey')\r\n                        && S3Testing_Option::get($jobid, 's3secretkey')\r\n                    ) {\r\n                        $this->edit_ajax(\r\n                            [\r\n                                's3base_url' => S3Testing_Option::get($jobid, 's3base_url'),\r\n                                's3accesskey' => S3Testing_Option::get($jobid, 's3accesskey'),\r\n                                's3secretkey' => S3Testing_Option::get($jobid, 's3secretkey'),\r\n                                's3region' => S3Testing_Option::get($jobid, 's3region'),\r\n                                's3bucketselected' => S3Testing_Option::get($jobid, 's3bucket'),\r\n                            ], true\r\n                        );\r\n                    } ?>\r\n                 </td>\r\n            </tr>\r\n<!--            <tr>-->\r\n<!--                <th scope=\"row\">-->\r\n<!--                    <label for=\"s3dirselected\">-->\r\n<!--                        --><?php //esc_html_e('Folder selection'); ?>\r\n<!--                    </label>-->\r\n<!--                </th>-->\r\n<!--                <td>-->\r\n<!--                    <input id=\"s3dirselected\"-->\r\n<!--                           name=\"s3dirselected\"-->\r\n<!--                           type=\"hidden\"-->\r\n<!--                           value=\"\"-->\r\n<!--                    />-->\r\n<!--                    -->\r\n<!---->\r\n<!--                </td>-->\r\n<!--            </tr>-->\r\n        </table>\r\n\r\n        <h3 class=\"title\">\r\n            <?php esc_html_e('S3 Backup settings'); ?>\r\n        </h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\">\r\n                    <label for=\"s3dirselected\">\r\n                        <?php esc_html_e('Folder in bucket'); ?>\r\n                    </label>\r\n                </th>\r\n                <td>\r\n                    <input id=\"s3dirselected\"\r\n                           name=\"s3dirselected\"\r\n                           type=\"hidden\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get($jobid, 's3dir')); ?>\"\r\n                           class=\"regular-text\"\r\n                    />\r\n                    <?php\r\n\r\n                    if (S3Testing_Option::get($jobid, 's3accesskey')\r\n                        && S3Testing_Option::get($jobid, 's3secretkey')\r\n                    ) {\r\n                        $this->edit_ajax_dir(\r\n                            [\r\n                                's3base_url' => S3Testing_Option::get($jobid, 's3base_url'),\r\n                                's3accesskey' => S3Testing_Option::get($jobid, 's3accesskey'),\r\n                                's3secretkey' => S3Testing_Option::get($jobid, 's3secretkey'),\r\n                                's3region' => S3Testing_Option::get($jobid, 's3region'),\r\n                                's3bucketselected' => S3Testing_Option::get($jobid, 's3bucket'),\r\n                            ]\r\n                        );\r\n                    }\r\n                    ?>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n        <?php\r\n    }\r\n\r\n    public function edit_ajax($args = [], $bucket = true)\r\n    {\r\n        $error = '';\r\n        $buckets = [];\r\n        $buckets_list = [];\r\n        $ajax = false;\r\n\r\n        if (!$args) {\r\n            $args = [];\r\n            check_ajax_referer('s3testing_ajax_nonce');\r\n            $args['s3accesskey'] = sanitize_text_field($_POST['s3accesskey']);\r\n            $args['s3secretkey'] = sanitize_text_field($_POST['s3secretkey']);\r\n            $args['s3base_url'] = s3testing_esc_url_default_secure($_POST['s3base_url'], ['http', 'https']);\r\n            $args['s3bucketselected'] = sanitize_text_field($_POST['s3bucketselected']);\r\n            $ajax = true;\r\n        }\r\n\r\n        if ($args['s3base_url']) {\r\n            $args['s3region'] = $args['s3base_url'];\r\n        }\r\n\r\n        echo '<span id=\"s3bucketerror\" class=\"s3testing-message-error\">';\r\n        if (!empty($args['s3accesskey']) && !empty($args['s3secretkey'])) {\r\n            if (empty($args['s3base_url'])) {\r\n                $aws = S3Testing_S3_Destination::fromOption($args['s3region']);\r\n            } else {\r\n                $options = [\r\n                    'label' => __('Custom S3 destination'),\r\n                    'endpoint' => $args['s3base_url'],\r\n                ];\r\n                $aws = S3Testing_S3_Destination::fromOptionArray($options);\r\n            }\r\n\r\n            try {\r\n                $s3 = $aws->client($args['s3accesskey'], $args['s3secretkey']);\r\n\r\n                $buckets = $s3->listBuckets();\r\n                if (!empty($buckets['Buckets'])) {\r\n                    $buckets_list = $buckets['Buckets'];\r\n                }\r\n\r\n            } catch (Exception $e) {\r\n                $error = $e->getMessage();\r\n                if ($e instanceof AwsException) {\r\n                    $error = $e->getAwsErrorMessage();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (empty($args['s3accesskey'])) {\r\n            esc_html_e('Missing access key!');\r\n        } elseif (empty($args['s3secretkey'])) {\r\n            esc_html_e('Missing secret access key!');\r\n        } elseif (!empty($error) && $error === 'Access Denied') {\r\n            echo '<input type=\"text\" name=\"s3bucket\" id=\"s3bucket\" value=\"' . esc_attr($args['s3bucketselected']) . '\" >';\r\n        } elseif (!empty($error)) {\r\n            echo esc_html($error);\r\n        } elseif (empty($buckets) || count($buckets['Buckets']) < 1) {\r\n            esc_html_e('No bucket found!');\r\n        }\r\n        echo '</span>';\r\n\r\n        if (!empty($buckets_list)) {\r\n            echo '<select name=\"s3bucket\" id=\"s3bucket\">';\r\n\r\n            foreach ($buckets_list as $bucket) {\r\n                echo '<option ' . selected($args['s3bucketselected'], esc_attr($bucket['Name']), false) . '>'\r\n                    . esc_attr($bucket['Name'])\r\n                    . '</option>';\r\n            }\r\n            echo '</select>';\r\n\r\n            $this->edit_inline_dir_js();\r\n        }\r\n\r\n        if ($ajax) {\r\n            exit();\r\n        }\r\n    }\r\n\r\n    public function edit_ajax_dir($args = [])\r\n    {\r\n        $error = '';\r\n        $folders = [];\r\n        $folders_list = [];\r\n        $ajax = false;\r\n\r\n        if (!$args) {\r\n            $args = [];\r\n            check_ajax_referer('s3testing_ajax_nonce');\r\n            $args['s3accesskey'] = sanitize_text_field($_POST['s3accesskey']);\r\n            $args['s3secretkey'] = sanitize_text_field($_POST['s3secretkey']);\r\n            $args['s3region'] = sanitize_text_field($_POST['s3region']);\r\n            $args['s3base_url'] = s3testing_esc_url_default_secure($_POST['s3base_url'], ['http', 'https']);\r\n            $args['s3bucketselected'] = sanitize_text_field($_POST['s3bucketselected']);\r\n\r\n            $ajax = true;\r\n        }\r\n\r\n        if ($args['s3base_url']) {\r\n            $args['s3region'] = $args['s3base_url'];\r\n        }\r\n\r\n        echo '<span id=\"s3direrror\" class=\"s3testing-message-error\">';\r\n        if (!empty($args['s3accesskey']) && !empty($args['s3secretkey'])) {\r\n            if (empty($args['s3base_url'])) {\r\n                $aws = S3Testing_S3_Destination::fromOption($args['s3region']);\r\n            } else {\r\n                $options = [\r\n                    'label' => __('Custom S3 destination'),\r\n                    'endpoint' => $args['s3base_url'],\r\n                ];\r\n                $aws = S3Testing_S3_Destination::fromOptionArray($options);\r\n            }\r\n\r\n            try {\r\n                $s3 = $aws->client($args['s3accesskey'], $args['s3secretkey']);\r\n\r\n                $folders = $s3->listObjectsV2([\r\n                    'Bucket' => $args['s3bucketselected'],\r\n                    'Delimiter' => '/',\r\n                ]);\r\n\r\n                if(!empty($folders['CommonPrefixes'])) {\r\n                    $folders_list = $folders['CommonPrefixes'];\r\n                }\r\n\r\n            } catch (Exception $e) {\r\n                $error = $e->getMessage();\r\n                if ($e instanceof AwsException) {\r\n                    $error = $e->getAwsErrorMessage();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (empty($args['s3accesskey'])) {\r\n            esc_html_e('No Bucket found');\r\n        } elseif (empty($args['s3secretkey'])) {\r\n            esc_html_e('No Bucket found');\r\n        } elseif (!empty($error)) {\r\n            echo esc_html($error);\r\n        }\r\n        echo '</span>';\r\n\r\n        echo '<select name=\"s3dir\" id=\"s3dir\">';\r\n        echo '<option' . selected($args['s3dirselected'], '', false) . '>/</option>'; // Option Root\r\n        if (!empty($folders_list)) {\r\n\r\n            foreach ($folders_list as $folder) {\r\n                echo '<option ' . selected($args['s3dirselected'], esc_attr($folder['Prefix']), false) . '>'\r\n                    . esc_attr($folder['Prefix'])\r\n                    . '</option>';\r\n            }\r\n            echo '</select>';\r\n        }\r\n\r\n        if ($ajax) {\r\n            exit();\r\n        }\r\n    }\r\n\r\n    public function edit_form_post_save($jobid)\r\n    {\r\n        S3Testing_Option::update($jobid, 's3accesskey', sanitize_text_field($_POST['s3accesskey']));\r\n        S3Testing_Option::update($jobid, 's3secretkey', sanitize_text_field($_POST['s3secretkey']));\r\n        S3Testing_Option::update(\r\n            $jobid,\r\n            's3base_url',\r\n            isset($_POST['s3base_url'])\r\n                ? s3testing_esc_url_default_secure($_POST['s3base_url'], ['http', 'https'])\r\n                : ''\r\n        );\r\n        S3Testing_Option::update($jobid, 's3region', sanitize_text_field($_POST['s3region']));\r\n        S3Testing_Option::update(\r\n            $jobid,\r\n            's3bucket',\r\n            isset($_POST['s3bucket']) ? sanitize_text_field($_POST['s3bucket']) : ''\r\n        );\r\n\r\n        $_POST['s3dir'] = trailingslashit(str_replace(\r\n            '//',\r\n            '/',\r\n            str_replace('\\\\', '/', trim(sanitize_text_field($_POST['s3dir'])))\r\n        ));\r\n\r\n        S3Testing_Option::update($jobid, 's3dir', $_POST['s3dir']);\r\n    }\r\n\r\n    public function job_run_archive(S3Testing_Job $job_object)\r\n    {\r\n        try {\r\n            if (empty($job_object->job['s3base_url'])) {\r\n                $aws_destination = S3Testing_S3_Destination::fromOption($job_object->job['s3region']);\r\n            } else {\r\n                $aws_destination = S3Testing_S3_Destination::fromJobId($job_object->job['jobid']);\r\n            }\r\n\r\n            //create s3 client\r\n            $s3 = $aws_destination->client(\r\n                $job_object->job['s3accesskey'],\r\n                $job_object->job['s3secretkey']\r\n            );\r\n\r\n            if ($s3->doesBucketExist($job_object->job['s3bucket'])) {\r\n                $bucketregion = $s3->getBucketLocation(['Bucket' => $job_object->job['s3bucket']]);\r\n            } else {\r\n\r\n                return true;\r\n            }\r\n\r\n//            if ($aws_destination->supportsMultipart()) {\r\n//                $multipart_uploads = $s3->listMultipartUploads([\r\n//                    'Bucket' => $job_object->job['s3bucket'],\r\n//                    'Prefix' => (string) $job_object->job['s3dir'],\r\n//                ]);\r\n//\r\n//                $uploads = $multipart_uploads->get('Uploads');\r\n//\r\n//                if (!empty($uploads)) {\r\n//                    foreach ($uploads as $upload) {\r\n//                        $s3->abortMultipartUpload([\r\n//                            'Bucket' => $job_object->job['s3bucket'],\r\n//                            'Key' => $upload['Key'],\r\n//                            'UploadId' => $upload['UploadId'],\r\n//                        ]);\r\n//                    }\r\n//                }\r\n//            }\r\n\r\n            if (!$up_file_handle = fopen($job_object->backup_folder . $job_object->backup_file, 'rb')) {\r\n                return false;\r\n            }\r\n\r\n            $create_args = [];\r\n            $create_args['Bucket'] = $job_object->job['s3bucket'];\r\n            $create_args['ACL'] = 'private';\r\n\r\n            $create_args['Metadata'] = ['BackupTime' => date('Y-m-d H:i:s', $job_object->start_time)];\r\n\r\n            $create_args['Body'] = $up_file_handle;\r\n\r\n            if($job_object->job['s3dir'] != '/') {\r\n                $create_args['Key'] = $job_object->job['s3dir'] . $job_object->backup_file;\r\n            } else {\r\n                $create_args['Key'] = $job_object->backup_file;\r\n            }\r\n\r\n            try {\r\n                $s3->putObject($create_args);\r\n            } catch (Exception $e) {\r\n                $errorMessage = $e->getMessage();\r\n                if ($e instanceof AwsException) {\r\n                    $errorMessage = $e->getAwsErrorMessage();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            $result = $s3->headObject([\r\n                'Bucket' => $job_object->job['s3bucket'],\r\n                'Key' => $job_object->job['s3dir'] . $job_object->backup_file,\r\n            ]);\r\n\r\n        } catch (Exception $e) {\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public function edit_inline_js()\r\n    {\r\n        ?>\r\n        <script type=\"text/javascript\">\r\n            jQuery(document).ready(function ($) {\r\n                function awsgetbucket() {\r\n                    var data = {\r\n                        action: 's3testing_dest_s3',\r\n                        s3accesskey: $('input[name=\"s3accesskey\"]').val(),\r\n                        s3secretkey: $('input[name=\"s3secretkey\"]').val(),\r\n                        s3bucketselected: $('input[name=\"s3bucketselected\"]').val(),\r\n                        s3base_url      : $( 'input[name=\"s3base_url\"]' ).val(),\r\n                        s3region: $('#s3region').val(),\r\n                        _ajax_nonce: $('#s3testingajaxnonce').val(),\r\n                        isBucket: $('#isBucket').val(),\r\n                    };\r\n                    console.log(\"Sending AJAX request with data:\", data);\r\n                    $.post(ajaxurl, data, function (response) {\r\n                        console.log(\"Response from server:\", response);\r\n                        $( '#s3bucketerror' ).remove();\r\n                        $( '#s3bucket' ).remove();\r\n                        $( '#s3bucketselected' ).after( response );\r\n                    });\r\n                }\r\n\r\n                // Trigger bucket list update when region or keys change\r\n\r\n                $('input[name=\"s3accesskey\"], input[name=\"s3secretkey\"], input[name=\"s3base_url\"]').on('keyup', function () {\r\n                    awsgetbucket();\r\n                });\r\n            });\r\n        </script>\r\n        <?php\r\n    }\r\n\r\n    public function edit_inline_dir_js()\r\n    {\r\n        ?>\r\n        <script type=\"text/javascript\">\r\n            jQuery(document).ready(function ($) {\r\n                function awsgetdir() {\r\n                    var data = {\r\n                        action: 's3testing_dest_s3_dir',\r\n                        s3accesskey: $('input[name=\"s3accesskey\"]').val(),\r\n                        s3secretkey: $('input[name=\"s3secretkey\"]').val(),\r\n                        s3bucketselected: $('#s3bucket').val(),\r\n                        s3base_url: $('input[name=\"s3base_url\"]').val(),\r\n                        s3region: $('#s3region').val(),\r\n                        _ajax_nonce: $('#s3testingajaxnonce').val(),\r\n                    };\r\n\r\n                    console.log(\"Selected bucket:\", data);\r\n\r\n                    $.post(ajaxurl, data, function (response) {\r\n                        console.log(\"Response from server:\", response);\r\n                        $('#s3direrror').remove();\r\n                        $('#s3dir').remove();\r\n                        $('#s3dirselected').after(response);\r\n                    });\r\n                }\r\n\r\n                $('#s3bucket').change(function () {\r\n                    awsgetdir();\r\n                });\r\n\r\n                awsgetdir();\r\n            });\r\n        </script>\r\n        <?php\r\n    }\r\n\r\n\r\n\r\n    public function can_run(array $job_settings): bool\r\n    {\r\n        if (empty($job_settings['s3accesskey'])) {\r\n            return false;\r\n        }\r\n\r\n        return !(empty($job_settings['s3secretkey']));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inc/class-destination-s3.php b/inc/class-destination-s3.php
--- a/inc/class-destination-s3.php	(revision 40281521e42965528a8f33dfcbf8d27c39b530b7)
+++ b/inc/class-destination-s3.php	(date 1739606876597)
@@ -19,6 +19,7 @@
 //            's3ssencrypt' => '',
 //            's3storageclass' => '',
             's3dir' => trailingslashit(sanitize_file_name(get_bloginfo('name'))),
+            's3dircreate' => '',
 //            's3maxbackups' => 15,
 //            's3syncnodelete' => true,
         ];
@@ -31,27 +32,27 @@
             <?php esc_html_e('S3 Service'); ?>
         </h3>
         <table class="form-table">
-            <tr>
-                <th scope="row">
-                    <label for="s3region">
-                        <?php esc_html_e('Select a S3 service'); ?>
-                    </label>
-                </th>
-                <td>
-
-                    <select name="s3region"
-                            id="s3region"
-                            title="<?php esc_attr_e('S3 Region'); ?>">
-                        <?php foreach (S3Testing_S3_Destination::options() as $id => $option) { ?>
-                            <option value="<?php echo esc_attr($id); ?>"
-                                <?php selected($id, S3Testing_Option::get($jobid, 's3region')); ?>
-                            >
-                                <?php echo esc_html($option['label']); ?>
-                            </option>
-                        <?php } ?>
-                    </select>
-                </td>
-            </tr>
+<!--            <tr>-->
+<!--                <th scope="row">-->
+<!--                    <label for="s3region">-->
+<!--                        --><?php //esc_html_e('Select a S3 service'); ?>
+<!--                    </label>-->
+<!--                </th>-->
+<!--                <td>-->
+<!---->
+<!--                    <select name="s3region"-->
+<!--                            id="s3region"-->
+<!--                            title="--><?php //esc_attr_e('S3 Region'); ?><!--">-->
+<!--                        --><?php //foreach (S3Testing_S3_Destination::options() as $id => $option) { ?>
+<!--                            <option value="--><?php //echo esc_attr($id); ?><!--"-->
+<!--                                --><?php //selected($id, S3Testing_Option::get($jobid, 's3region')); ?>
+<!--                            >-->
+<!--                                --><?php //echo esc_html($option['label']); ?>
+<!--                            </option>-->
+<!--                        --><?php //} ?>
+<!--                    </select>-->
+<!--                </td>-->
+<!--            </tr>-->
             <tr>
                 <th scope="row">
                     <label for="s3base_url">
@@ -188,6 +189,21 @@
                         );
                     }
                     ?>
+                </td>
+            </tr>
+            <tr>
+                <th scope="row">
+                    <label for="s3dir">
+                        <?php esc_html_e('Or create new folder'); ?>
+                    </label>
+                </th>
+                <td>
+                    <input id="s3dircreate"
+                           name="s3dircreate"
+                           type="text"
+                           value="<?php echo S3Testing_Option::get($jobid, 's3dircreate') == '/' ? '' : esc_attr(S3Testing_Option::get($jobid, 's3dircreate')); ?>"
+                           class="regular-text"
+                    />
                 </td>
             </tr>
         </table>
@@ -289,6 +305,7 @@
             $args['s3region'] = sanitize_text_field($_POST['s3region']);
             $args['s3base_url'] = s3testing_esc_url_default_secure($_POST['s3base_url'], ['http', 'https']);
             $args['s3bucketselected'] = sanitize_text_field($_POST['s3bucketselected']);
+            $args['s3dirselected'] = sanitize_text_field($_POST['s3dirselected']);
 
             $ajax = true;
         }
@@ -376,10 +393,16 @@
         $_POST['s3dir'] = trailingslashit(str_replace(
             '//',
             '/',
-            str_replace('\\', '/', trim(sanitize_text_field($_POST['s3dir'])))
+            str_replace('\\', '/', trim(sanitize_text_field($_POST['s3dir']) . $_POST['s3dircreate']))
         ));
 
+        $_POST['s3dircreate'] = trailingslashit(str_replace(
+            '//',
+            '/',
+            str_replace('\\', '/', trim(sanitize_text_field($_POST['s3dircreate'])))
+        ));
         S3Testing_Option::update($jobid, 's3dir', $_POST['s3dir']);
+        S3Testing_Option::update($jobid, 's3dircreate', $_POST['s3dircreate']);
     }
 
     public function job_run_archive(S3Testing_Job $job_object)
@@ -390,19 +413,18 @@
             } else {
                 $aws_destination = S3Testing_S3_Destination::fromJobId($job_object->job['jobid']);
             }
-
             //create s3 client
             $s3 = $aws_destination->client(
                 $job_object->job['s3accesskey'],
                 $job_object->job['s3secretkey']
             );
 
-            if ($s3->doesBucketExist($job_object->job['s3bucket'])) {
-                $bucketregion = $s3->getBucketLocation(['Bucket' => $job_object->job['s3bucket']]);
-            } else {
-
-                return true;
-            }
+//            if ($s3->doesBucketExist($job_object->job['s3bucket'])) {
+//                $bucketregion = $s3->getBucketLocation(['Bucket' => $job_object->job['s3bucket']]);
+//            } else {
+//
+//                return true;
+//            }
 
 //            if ($aws_destination->supportsMultipart()) {
 //                $multipart_uploads = $s3->listMultipartUploads([
@@ -508,6 +530,8 @@
                         s3accesskey: $('input[name="s3accesskey"]').val(),
                         s3secretkey: $('input[name="s3secretkey"]').val(),
                         s3bucketselected: $('#s3bucket').val(),
+                        s3dirselected: $('#s3dirselected').val(),
+                        s3dir: $('#s3dir').val(),
                         s3base_url: $('input[name="s3base_url"]').val(),
                         s3region: $('#s3region').val(),
                         _ajax_nonce: $('#s3testingajaxnonce').val(),
Index: inc/class-page-editjob.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nclass S3Testing_Page_EditJob\r\n{\r\n    public static function auth()\r\n    {\r\n        if (isset($_GET['tab'])) {\r\n            $_GET['tab'] = sanitize_title_with_dashes($_GET['tab']);\r\n            if (substr($_GET['tab'], 0, 5) != 'dest-' && substr($_GET['tab'], 0, 8) != 'jobtype-' && !in_array($_GET['tab'], ['job', 'cron'], true)) {\r\n                $_GET['tab'] = 'job';\r\n            }\r\n        } else {\r\n            $_GET['tab'] = 'job';\r\n        }\r\n//        if (substr($_GET['tab'], 0, 5) == 'dest-') {\r\n//            $jobid = (int) $_GET['jobid'];\r\n//            $id = strtoupper(str_replace('dest-', '', $_GET['tab']));\r\n//            $dest_class = S3Testing::get_destination($id);\r\n//            $dest_class->edit_auth($jobid);\r\n//        }\r\n    }\r\n\r\n    public static function save_post_form($tab, $jobid)\r\n    {\r\n        $job_types = S3Testing::get_job_types();\r\n\r\n        switch ($tab) {\r\n            case 'job':\r\n                S3Testing_Option::update($jobid, 'jobid', $jobid);\r\n\r\n                $backuptype = 'archive';\r\n                S3Testing_Option::update($jobid, 'backuptype', $backuptype);\r\n\r\n                $type_post = isset($_POST['type']) ? (array)$_POST['type'] : [];\r\n                foreach ($type_post as $key => $value) {\r\n                    if (!isset($job_types[$value])) {\r\n                        unset($type_post[$key]);\r\n                    }\r\n                }\r\n\r\n                sort($type_post);\r\n                S3Testing_Option::update($jobid, 'type', $type_post);\r\n\r\n                $makes_file = false;\r\n\r\n                foreach ($job_types as $type_id => $job_type) {\r\n                    if (in_array($type_id, $type_post, true)) {\r\n                        if ($job_type->creates_file()) {\r\n                            $makes_file = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if ($makes_file) {\r\n                    $destinations_post = isset($_POST['destinations']) ? (array)$_POST['destinations'] : [];\r\n                } else {\r\n                    $destinations_post = [];\r\n                }\r\n\r\n                $destinations = S3Testing::get_registered_destinations();\r\n\r\n                foreach ($destinations_post as $key => $dest_id) {\r\n                    if (!isset($destinations[$dest_id])) {\r\n                        unset($destinations_post[$key]);\r\n                        continue;\r\n                    }\r\n                }\r\n                sort($destinations_post);\r\n\r\n                S3Testing_Option::update($jobid, 'destinations', $destinations_post);\r\n\r\n                $name = sanitize_text_field(trim((string)$_POST['name']));\r\n                if (!$name || $name === __('New Job')) {\r\n                    $name = sprintf(__('Job with ID %d'), $jobid);\r\n                }\r\n                S3Testing_Option::update($jobid, 'name', $name);\r\n\r\n                $archiveformat = in_array($_POST['archiveformat'], [\r\n                    '.zip',\r\n                    '.tar',\r\n                    '.tar.gz',\r\n                ], true) ? $_POST['archiveformat'] : '.zip';\r\n\r\n                S3Testing_Option::update($jobid, 'archiveformat', $archiveformat);\r\n                S3Testing_Option::update($jobid, 'archivename', sanitize_text_field($_POST['archivename']));\r\n\r\n                break;\r\n            case 'runnow':\r\n                $jobid = absint($_GET['jobid']);\r\n                if ($jobid) {\r\n\r\n                }\r\n            default:\r\n                if (strstr((string)$tab, 'dest-')) {\r\n                    $dest_class = S3Testing::get_destination(str_replace('dest-', '', (string)$tab));\r\n                    $dest_class->edit_form_post_save($jobid);\r\n                }\r\n                if (strstr((string)$tab, 'jobtype-')) {\r\n                    $id = strtoupper(str_replace('jobtype-', '', (string)$tab));\r\n                    $job_types[$id]->edit_form_post_save($jobid);\r\n                }\r\n        }\r\n\r\n        //saved message\r\n        $message = S3Testing_Admin::get_messages();\r\n        if (empty($message['error'])) {\r\n            $url = S3Testing_Job::get_jobrun_url('runnowlink', $jobid);\r\n            S3Testing_Admin::message(sprintf(__('Changes for job <i>%s</i> saved.'), S3Testing_Option::get($jobid, 'name')) . ' <a href=\"' . network_admin_url('admin.php') . '?page=s3testingjobs\">' . __('Jobs overview') . '</a> | <a href=\"' . $url['url'] . '\">' . __('Run now') . '</a>');\r\n        }\r\n    }\r\n\r\n    public static function page()\r\n    {\r\n        if (!empty($_GET['jobid'])) {\r\n            $jobid = (int)$_GET['jobid'];\r\n        } else {\r\n            //generate jobid if not exists\r\n            $jobid = S3Testing_Option::next_job_id();\r\n        }\r\n\r\n        $destinations = S3Testing::get_registered_destinations();\r\n        $job_types = S3Testing::get_job_types();\r\n        $archive_format_option = S3Testing_Option::get($jobid, 'archiveformat'); ?>\r\n        <div class=\"wrap\" id=\"s3testing-page\">\r\n        <?php\r\n        echo '<h1>' . sprintf(esc_html__('%1$s &rsaquo; Job: %2$s'), S3Testing::get_plugin_data('name'), '<span id=\"h2jobtitle\">' . esc_html(S3Testing_Option::get($jobid, 'name')) . '</span>') . '</h1>';\r\n\r\n        $tabs = [\r\n            'job' => [\r\n                'name' => esc_html__('General'),\r\n                'display' => true,\r\n            ]\r\n        ];\r\n\r\n        $job_job_types = S3Testing_Option::get($jobid, 'type');\r\n\r\n        foreach ($job_types as $typeid => $typeclass) {\r\n            $tabid = 'jobtype-' . strtolower($typeid);\r\n            $tabs[$tabid]['name'] = $typeclass->info['name'];\r\n            $tabs[$tabid]['display'] = true;\r\n            if (!in_array($typeid, $job_job_types, true)) {\r\n                $tabs[$tabid]['display'] = false;\r\n            }\r\n        }\r\n        $jobdests = S3Testing_Option::get($jobid, 'destinations');\r\n\r\n        foreach ($destinations as $destid => $dest) {\r\n            $tabid = 'dest-' . strtolower($destid);\r\n            $tabs[$tabid]['name'] = sprintf('To: %s', $dest['info']['name']);\r\n            $tabs[$tabid]['display'] = true;\r\n            if (!in_array($destid, $jobdests, true)) {\r\n                $tabs[$tabid]['display'] = false;\r\n            }\r\n        }\r\n\r\n        echo '<h2 class=\"nav-tab-wrapper\">';\r\n\r\n        foreach ($tabs as $id => $tab) {\r\n            $addclass = '';\r\n            if ($id === $_GET['tab']) {\r\n                $addclass = ' nav-tab-active';\r\n            }\r\n            $display = '';\r\n            if (!$tab['display']) {\r\n                $display = ' style=\"display:none;\"';\r\n            }\r\n            echo '<a href=\"' . wp_nonce_url(network_admin_url('admin.php?page=s3testingeditjob&tab=' . $id . '&jobid=' . $jobid), 'edit-job') . '\" class=\"nav-tab' . $addclass . '\" id=\"tab-' . esc_attr($id) . '\" data-nexttab=\"' . esc_attr($id) . '\"' . $display . '>' . esc_html($tab['name']) . '</a>';\r\n\r\n\r\n        }\r\n        echo '</h2>';\r\n        S3Testing_Admin::display_message();\r\n        echo '<form name=\"editjob\" id=\"editjob\" method=\"post\" action=\"' . esc_attr(admin_url('admin-post.php')) . '\">';\r\n        echo '<input type=\"hidden\" id=\"jobid\" name=\"jobid\" value=\"' . esc_attr($jobid) . '\" />';\r\n        echo '<input type=\"hidden\" name=\"tab\" value=\"' . esc_attr($_GET['tab']) . '\" />';\r\n        echo '<input type=\"hidden\" name=\"nexttab\" value=\"' . esc_attr($_GET['tab']) . '\" />';\r\n        echo '<input type=\"hidden\" name=\"page\" value=\"s3testingeditjob\" />';\r\n        echo '<input type=\"hidden\" name=\"action\" value=\"s3testing\" />';\r\n        echo '<input type=\"hidden\" name=\"anchor\" value=\"\" />';\r\n        wp_nonce_field('s3testingeditjob_page');\r\n        wp_nonce_field('s3testing_ajax_nonce', 's3testingajaxnonce', false);\r\n\r\n    switch ($_GET['tab']) {\r\n    case 'job':\r\n        ?>\r\n        <div class=\"table\" id=\"info-tab-job\">\r\n        <h3>Job Name</h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\"><label for=\"name\"><?php esc_html_e('Please name this job.'); ?></label></th>\r\n                <td>\r\n                    <input name=\"name\" type=\"text\" id=\"name\" placeholder=\"<?php esc_attr_e('Job Name'); ?>\"\r\n                           data-empty=\"<?php esc_attr_e('New Job'); ?>\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get($jobid, 'name')); ?>\" class=\"regular-text\"/>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h3>Job Tasks</h3>\r\n        <table class=\"form-table\">\r\n            <tr>\r\n                <th scope=\"row\">This job is a&#160;&hellip;</th>\r\n                <td>\r\n                    <fieldset>\r\n                        <legend class=\"screen-reader-text\"><span><?php esc_html_e('Job tasks'); ?></span>\r\n                        </legend><?php\r\n                        foreach ($job_types as $id => $typeclass) {\r\n                            $addclass = '';\r\n                            if ($typeclass->creates_file()) {\r\n                                $addclass .= ' filetype';\r\n                            }\r\n                            echo '<p><label for=\"jobtype-select-' . strtolower($id) . '\"><input class=\"jobtype-select checkbox' . $addclass . '\" id=\"jobtype-select-' . strtolower($id) . '\" type=\"checkbox\" ' . checked(true, in_array($id, S3Testing_Option::get($jobid, 'type'), true), false) . ' name=\"type[]\" value=\"' . esc_attr($id) . '\" /> ' . esc_attr($typeclass->info['description']) . '</label>';\r\n                            if (!empty($typeclass->info['help'])) {\r\n                                echo '<br><span class=\"description\">' . esc_attr($typeclass->info['help']) . '</span>';\r\n                            }\r\n                            echo '</p>';\r\n                        }\r\n                        ?></fieldset>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h3 class=\"title hasdests\"><?php esc_html_e('Backup File Creation'); ?></h3>\r\n        <p class=\"hasdests\"></p>\r\n        <table class=\"form-table hasdests\">\r\n            <tr class=\"nosync\">\r\n                <th scope=\"row\"><label for=\"archivename\"><?php esc_html_e('Archive name'); ?></label></th>\r\n                <td>\r\n                    <input name=\"archivename\" type=\"text\" id=\"archivename\" placeholder=\"my-backup\"\r\n                           value=\"<?php echo esc_attr(S3Testing_Option::get($jobid, 'archivename')); ?>\"\r\n                           class=\"regular-text code\"/>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th scope=\"row\"><?php esc_html_e('Archive Format'); ?></th>\r\n                <td>\r\n                    <fieldset>\r\n                        <legend class=\"screen-reader-text\"><span><?php esc_html_e('Archive Format'); ?></span></legend>\r\n                        <?php\r\n                        if (class_exists(\\ZipArchive::class)) {\r\n                            echo '<p><label for=\"idarchiveformat-zip\">\r\n                                   <input class=\"radio\" type=\"radio\"' . checked('.zip', $archive_format_option, false) . ' name=\"archiveformat\" id=\"archiveformat-zip\" value=\".zip\"/> ' . esc_html__('Zip') . '\r\n                                    </label></p>';\r\n                        } else {\r\n                            echo '<p><label for=\"idarchiveformat-zip\"><input class=\"radio\" type=\"radio\"' . checked('.zip', $archive_format_option, false) . ' name=\"archiveformat\" id=\"idarchiveformat-zip\" value=\".zip\" disabled=\"disabled\" /> ' . esc_html__('Zip') . '</label>';\r\n                            echo '<br /><span class=\"description\">' . esc_html(__('ZipArchive PHP class is missing, so s3testing will use PclZip instead.')) . '</span></p>';\r\n                        }\r\n                        echo '<p><label for=\"idarchiveformat-tar\"><input class=\"radio\" type=\"radio\"' . checked('.tar', $archive_format_option, false) . ' name=\"archiveformat\" id=\"idarchiveformat-tar\" value=\".tar\" /> ' . esc_html__('Tar') . '</label></p>';\r\n\r\n                        if (function_exists('gzopen')) {\r\n                            echo '<p><label for=\"idarchiveformat-targz\"><input class=\"radio\" type=\"radio\"' . checked('.tar.gz', $archive_format_option, false) . ' name=\"archiveformat\" id=\"idarchiveformat-targz\" value=\".tar.gz\" /> ' . esc_html__('Tar GZip') . '</label></p>';\r\n                        } else {\r\n                            echo '<p><label for=\"idarchiveformat-targz\"><input class=\"radio\" type=\"radio\"' . checked('.tar.gz', $archive_format_option, false) . ' name=\"archiveformat\" id=\"idarchiveformat-targz\" value=\".tar.gz\" disabled=\"disabled\" /> ' . esc_html__('Tar GZip') . '</label>';\r\n                            echo '<br /><span class=\"description\">' . esc_html(sprintf(__('Disabled due to missing %s PHP function.'), 'gzopen()')) . '</span></p>';\r\n                        }\r\n                        ?>\r\n                    </fieldset>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n        <h3 class=\"title hasdests\"><?php esc_html_e('Job Destination'); ?></h3>\r\n        <p class=\"hasdests\"></p>\r\n        <table class=\"form-table hasdests\">\r\n            <tr>\r\n                <th scope=\"row\"><?php esc_html_e('Where should your backup file be stored?'); ?></th>\r\n                <td>\r\n                    <fieldset>\r\n                        <legend class=\"screen-reader-text\">\r\n                            <span><?php esc_html_e('Where should your backup file be stored?'); ?></span>\r\n                        </legend><?php\r\n                        foreach ($destinations as $id => $dest) {\r\n                            $syncclass = '';\r\n                            if (!$dest['can_sync']) {\r\n                                $syncclass = 'nosync';\r\n                            }\r\n                            echo '<p class=\"' . esc_attr($syncclass) . '\"><label for=\"dest-select-' . strtolower($id) . '\"><input class=\"checkbox\" id=\"dest-select-' . strtolower(esc_attr($id)) . '\" type=\"checkbox\" ' . checked(true, in_array($id, S3Testing_Option::get($jobid, 'destinations'), true), false) . ' name=\"destinations[]\" value=\"' . esc_attr($id) . '\" ' . disabled(!empty($dest['error']), true, false) . ' /> ' . esc_attr($dest['info']['description']);\r\n                            if (!empty($dest['error'])) {\r\n                                echo '<br><span class=\"description\">' . esc_attr($dest['error']) . '</span>';\r\n                            }\r\n                            echo '</label></p>';\r\n                        }\r\n                        ?></fieldset>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n        <?php\r\n        break;\r\n        default:\r\n            echo '<div class=\"table\" id=\"info-tab-' . $_GET['tab'] . '\">';\r\n            if (strstr((string)$_GET['tab'], 'dest-s3')) {\r\n                $dest_object = S3Testing::get_destination(str_replace('dest-', '', (string)$_GET['tab']));\r\n                $dest_object->edit_tab($jobid);\r\n            }\r\n            if (strstr((string)$_GET['tab'], 'jobtype-')) {\r\n                $id = strtoupper(str_replace('jobtype-', '', (string)$_GET['tab']));\r\n                $job_types[$id]->edit_tab($jobid);\r\n            }\r\n\r\n            echo '</div>';\r\n    }\r\n        echo '<p class=\"submit\">';\r\n        submit_button('Save changes', 'primary', 'save', false, ['tabindex' => '2', 'accesskey' => 'p']);\r\n        echo '</p></form>';\r\n        ?>\r\n        </div>\r\n\r\n        <script type=\"text/javascript\">\r\n            jQuery(document).ready(function($){\r\n                //auto post if things change\r\n                var changed = false;\r\n                $('#editjob').change(function() {\r\n                    changed = true;\r\n                });\r\n                $('.nav-tab').click(function() {\r\n                    if(changed) {\r\n                        $( 'input[name=\"nexttab\"]' ).val( $(this).data( \"nexttab\" ) );\r\n                        $( '#editjob' ).submit();\r\n                        return false;\r\n                    }\r\n                });\r\n            });\r\n        </script>\r\n        <?php\r\n        //add inline js\r\n        if (strstr((string)$_GET['tab'], 'dest-')) {\r\n            $dest_object = S3Testing::get_destination(str_replace('dest-', '', sanitize_text_field($_GET['tab'])));\r\n            $dest_object->edit_inline_js();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inc/class-page-editjob.php b/inc/class-page-editjob.php
--- a/inc/class-page-editjob.php	(revision 40281521e42965528a8f33dfcbf8d27c39b530b7)
+++ b/inc/class-page-editjob.php	(date 1739594549111)
@@ -322,7 +322,7 @@
             });
         </script>
         <?php
-        //add inline js
+
         if (strstr((string)$_GET['tab'], 'dest-')) {
             $dest_object = S3Testing::get_destination(str_replace('dest-', '', sanitize_text_field($_GET['tab'])));
             $dest_object->edit_inline_js();
Index: inc/class-s3-destination.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nuse Aws\\S3\\S3Client;\r\nclass S3Testing_S3_Destination\r\n{\r\n\r\n    private $options = [];\r\n    public function __construct($options)\r\n    {\r\n        $default = [\r\n            'label' => __('Custom S3 destination'),\r\n            'endpoint' => '',\r\n            'region' => 'ap-southeast-2',\r\n            'multipart' => true,\r\n            'only_path_style_bucket' => true,\r\n            'version' => 'latest',\r\n            'signature' => 'v4',\r\n        ];\r\n\r\n        $this->options = array_merge($default, $options);\r\n    }\r\n\r\n    public static function options()\r\n    {\r\n        return apply_filters(\r\n            's3testing_s3_destination',\r\n            [\r\n                'us-east-2' => [\r\n                    'label' => __('Amazon S3: US East (Ohio)'),\r\n                    'region' => 'us-east-2',\r\n                    'multipart' => true,\r\n                ],\r\n                'us-east-1' => [\r\n                    'label' => __('Amazon S3: US East (N. Virginia)'),\r\n                    'region' => 'us-east-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'us-west-1' => [\r\n                    'label' => __('Amazon S3: US West (N. California)'),\r\n                    'region' => 'us-west-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'us-west-2' => [\r\n                    'label' => __('Amazon S3: US West (Oregon)'),\r\n                    'region' => 'us-west-2',\r\n                    'multipart' => true,\r\n                ],\r\n                'af-south-1' => [\r\n                    'label' => __('Amazon S3: Africa (Cape Town)'),\r\n                    'region' => 'af-south-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-east-1' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Hong Kong)'),\r\n                    'region' => 'ap-east-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-southeast-3' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Jakarta)'),\r\n                    'region' => 'ap-southeast-3',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-south-1' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Mumbai)'),\r\n                    'region' => 'ap-south-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-northeast-3' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Osaka)'),\r\n                    'region' => 'ap-northeast-3',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-northeast-2' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Seoul)'),\r\n                    'region' => 'ap-northeast-2',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-southeast-1' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Singapore)'),\r\n                    'region' => 'ap-southeast-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-southeast-2' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Sydney)'),\r\n                    'region' => 'ap-southeast-2',\r\n                    'multipart' => true,\r\n                ],\r\n                'ap-northeast-1' => [\r\n                    'label' => __('Amazon S3: Asia Pacific (Tokyo)'),\r\n                    'region' => 'ap-northeast-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'ca-central-1' => [\r\n                    'label' => __('Amazon S3: Canada (Central)'),\r\n                    'region' => 'ca-central-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-central-1' => [\r\n                    'label' => __('Amazon S3: Europe (Frankfurt)'),\r\n                    'region' => 'eu-central-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-west-1' => [\r\n                    'label' => __('Amazon S3: Europe (Ireland)'),\r\n                    'region' => 'eu-west-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-west-2' => [\r\n                    'label' => __('Amazon S3: Europe (London)'),\r\n                    'region' => 'eu-west-2',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-south-1' => [\r\n                    'label' => __('Amazon S3: Europe (Milan)'),\r\n                    'region' => 'eu-south-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-west-3' => [\r\n                    'label' => __('Amazon S3: Europe (Paris)'),\r\n                    'region' => 'eu-west-3',\r\n                    'multipart' => true,\r\n                ],\r\n                'eu-north-1' => [\r\n                    'label' => __('Amazon S3: Europe (Stockholm)'),\r\n                    'region' => 'eu-north-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'me-south-1' => [\r\n                    'label' => __('Amazon S3: Middle East (Bahrain)'),\r\n                    'region' => 'me-south-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'sa-east-1' => [\r\n                    'label' => __('Amazon S3: South America (São Paulo)'),\r\n                    'region' => 'sa-east-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'us-gov-east-1' => [\r\n                    'label' => __('Amazon S3: AWS GovCloud (US-East)'),\r\n                    'region' => 'us-gov-east-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'us-gov-west-1' => [\r\n                    'label' => __('Amazon S3: AWS GovCloud (US-West)'),\r\n                    'region' => 'us-gov-west-1',\r\n                    'multipart' => true,\r\n                ],\r\n                'google-storage' => [\r\n                    'label' => __('Google Storage: EU (Multi-Regional)'),\r\n                    'region' => 'EU',\r\n                    'endpoint' => 'https://storage.googleapis.com',\r\n                ],\r\n                'google-storage-us' => [\r\n                    'label' => __('Google Storage: USA (Multi-Regional)'),\r\n                    'region' => 'US',\r\n                    'endpoint' => 'https://storage.googleapis.com',\r\n                ],\r\n                'google-storage-asia' => [\r\n                    'label' => __('Google Storage: Asia (Multi-Regional)'),\r\n                    'region' => 'ASIA',\r\n                    'endpoint' => 'https://storage.googleapis.com',\r\n                ],\r\n                'dreamhost' => [\r\n                    'label' => __('Dream Host Cloud Storage'),\r\n                    'endpoint' => 'https://objects-us-west-1.dream.io',\r\n                ],\r\n                'digital-ocean-sfo2' => [\r\n                    'label' => __('DigitalOcean: SFO2'),\r\n                    'endpoint' => 'https://sfo2.digitaloceanspaces.com',\r\n                ],\r\n                'digital-ocean-nyc3' => [\r\n                    'label' => __('DigitalOcean: NYC3'),\r\n                    'endpoint' => 'https://nyc3.digitaloceanspaces.com',\r\n                ],\r\n                'digital-ocean-ams3' => [\r\n                    'label' => __('DigitalOcean: AMS3'),\r\n                    'endpoint' => 'https://ams3.digitaloceanspaces.com',\r\n                ],\r\n                'digital-ocean-sgp1' => [\r\n                    'label' => __('DigitalOcean: SGP1'),\r\n                    'endpoint' => 'https://sgp1.digitaloceanspaces.com',\r\n                ],\r\n                'digital-ocean-fra1' => [\r\n                    'label' => __('DigitalOcean: FRA1'),\r\n                    'endpoint' => 'https://fra1.digitaloceanspaces.com',\r\n                ],\r\n                'scaleway-ams' => [\r\n                    'label' => __('Scaleway: AMS'),\r\n                    'region' => 'nl-ams',\r\n                    'endpoint' => 'https://s3.nl-ams.scw.cloud',\r\n                ],\r\n                'scaleway-par' => [\r\n                    'label' => __('Scaleway: PAR'),\r\n                    'region' => 'fr-par',\r\n                    'endpoint' => 'https://s3.fr-par.scw.cloud',\r\n                ],\r\n            ]\r\n        );\r\n    }\r\n\r\n    public function client($accessKey, $secretKey)\r\n    {\r\n        $s3Options = [\r\n            'signature' => $this->signature(),\r\n            'credentials' => [\r\n                'key' => $accessKey,\r\n                'secret' => $secretKey,\r\n            ],\r\n            'region' => $this->region(),\r\n            'http' => [\r\n                'verify' => false,\r\n            ],\r\n            'version' => $this->version(),\r\n            'use_path_style_endpoint' => $this->onlyPathStyleBucket(),\r\n        ];\r\n\r\n        if ($this->endpoint()) {\r\n            $s3Options['endpoint'] = $this->endpoint();\r\n            if (!$this->region()) {\r\n                $s3Options['bucket_endpoint'] = true;\r\n            }\r\n        }\r\n\r\n        $s3Options = apply_filters('s3_testing_options', $s3Options);\r\n\r\n        return new S3Client($s3Options);\r\n    }\r\n\r\n    public static function fromOption($idOrUrl)\r\n    {\r\n        $destinations = self::options();\r\n        return new self($destinations[$idOrUrl]);\r\n    }\r\n\r\n    public static function fromOptionArray($optionsArr)\r\n    {\r\n        return new self($optionsArr);\r\n    }\r\n\r\n    public static function fromJobId($jobId)\r\n    {\r\n        $options = [\r\n            'label' => __('Custom S3 destination'),\r\n            'endpoint' => S3Testing_Option::get($jobId, 's3base_url'),\r\n            'region' => S3Testing_Option::get($jobId, 's3region'),\r\n        ];\r\n\r\n        return self::fromOptionArray($options);\r\n    }\r\n\r\n    public function label()\r\n    {\r\n        return $this->options['label'];\r\n    }\r\n\r\n    public function region()\r\n    {\r\n        return $this->options['region'];\r\n    }\r\n\r\n    public function endpoint()\r\n    {\r\n        return $this->options['endpoint'];\r\n    }\r\n\r\n    public function version()\r\n    {\r\n        return $this->options['version'];\r\n    }\r\n\r\n    public function signature()\r\n    {\r\n        return $this->options['signature'];\r\n    }\r\n\r\n    public function supportsMultipart()\r\n    {\r\n        return (bool) $this->options['multipart'];\r\n    }\r\n\r\n    public function onlyPathStyleBucket()\r\n    {\r\n        return (bool) $this->options['only_path_style_bucket'];\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inc/class-s3-destination.php b/inc/class-s3-destination.php
--- a/inc/class-s3-destination.php	(revision 40281521e42965528a8f33dfcbf8d27c39b530b7)
+++ b/inc/class-s3-destination.php	(date 1739607056129)
@@ -221,7 +221,6 @@
         }
 
         $s3Options = apply_filters('s3_testing_options', $s3Options);
-
         return new S3Client($s3Options);
     }
 
